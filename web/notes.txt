SAI DA PASTA SERVER
> npx create-next-app@latest web --use-npm
    'yes' p todas as perguntas

Na pasta web
> npm run dev


Add no settings.json p criar autocompletar das tags
  "emmet.syntaxProfiles": {
    "javascript": "jsx"
  },
  "emmet.includeLanguages": {
    "javascript": "javascriptreact"
  },


ROTEAMENTO
O Next trás as rotas prontas, basta criar arquivos page.tsx dentro da pasta app
  Ex: app > page.tsx
      app > ignite > page.tsx  (localhost:3000/ignite), mas precisa do "export default function Nome() {...}"


ESLINT
Além do ESLint q vem c o Next instala o ESLint c a configuração da rocketseat
> npm i @rocketseat/eslint-config -D

Add no .eslintrc.json a linha de código da rocketseat
{
  "extends": [
    "next/core-web-vitals", 
    "@rocketseat/eslint-config/node"
  ]
}

Após isso vão aparecer erros em alguns arquivos q devem ser corrigidos
Ex: No layout.tsx
  children: React.ReactNode
    ⬇ 
  children: ReactNode
  apaga 'React', deixa o mouse sobre 'ReactNode, clica no Quick fix e depois 'Add import from react'


PRETTIER
> npm i prettier-plugin-tailwindcss -D

Cria o arquivo prettier.config.js c o conteúdo abaixo
  module.exports = {
    plugins: [require('prettier-plugin-tailwindcss')],
  }

Reinicia o VS Code p aplicar as configurações do prettier no tailwindcss
CTRL + SHIFT + p   >   reload windows
  
  reordenou o tailwind do page.tsx p padronizar
    <div className="text-2xl font-bold uppercase w-20 h-20 bg-red-300 rounded m-10">Oi</div>
      ⬇ 
    <div className="m-10 h-20 w-20 rounded bg-red-300 text-2xl font-bold uppercase">


FONTS
  import { ... } from 'next/font/google'
  Add fonts google sem ser pelo método tradicional/links tem a vantagem de evitar o "efeito layout shift" (qdo a aplicação carrega c uma fonte padrão e só depois troca pela fonte escolhida)

CORES
  No Figma foi usado o plugin Foundation: Color Generation

  P selecionar os HEXs das cores:
    - clica num HEX apertando CTRL
    - e sem soltar o CTRL aperta tbm no SHIFT
    - e sai clicando só nos HEXs
  
  Após copiar as cores no tailwind.config.js > extends, seleciona todas as cores e aperta CTRL + ALT + i pro cursor ir pro final e colocar a vírgula

FAVICON
Basta colocar a imagem c o nome icon.png ou favico.ico dentro da pasta app

REACT TAILWIND
CENTRALIZAR O POSITION
  className="absolute top-1/2 -translate-y-1/2"

TRACINHOS/ MARCADORES
Não usou a propriedade repeating-linear-gradient() pq nem todos os browsers suportam ela

PACOTE DE ICONES
> npm i lucide-react

ATENÇÃO: o pacote PHOSPHOR ainda não foi atualiza p funcionar c a nova versão no Next


AULA 03

OAUTH
Permite logar na minha aplicação utilizando uma conta existente em outra aplicação.
No caso a conta do Github

GITHUB
Clica na imagem do perfil  >  Settings  >  Developer settings (final do sidebar)  >  OAuth Apps
Register a new application
  Application name: NLW SpaceTime (DEV)
  Homepage URL: http://localhost:3000
  Authorization callback URL: http://localhost:3000/api/auth/callback
  Register application

Client ID: 5d9b9843964b7a74ffa8

No VS Code
Cria arquivo .env.local
  # Github
  NEXT_PUBLIC_GITHUB_CLIENT_ID=5d9b9843964b7a74ffa8

No GITHUB clica em Generate a new client secret
  Copia a key do Client Secret ea4bcc96893ae322b767dc2d61bc0906668eab4d

Na pasta Server  > arquivo .env add
  # Github
  GITHUB_CLIENT_ID=5d9b9843964b7a74ffa8
  GITHUB_CLIENT_SECRET=ea4bcc96893ae322b767dc2d61bc0906668eab4d


AULA 03

Dentro de scr/app cria as pastas api > auth > callback e o arquivo route.ts

AXIOS
Instala o axios tbm no frontend pq depois q ele pega o código do Github ele precisa enviar p o backend
> npm i axios

Dentro da pasta src cria a pasta e arquivo scr > lib > api.ts
  import axios from 'axios'

  export const api = axios.create({
    baseURL: 'http://localhost:3333',
  })

COOKIE
Dá p verificar o cookie no DevTools > menu Application > sidebar Storage > Cookies

Em page.tsx
  import { cookies } from 'next/headers'
  const isAuthenticated = cookies().has('token')
        {isAuthenticated ? <p>Oi</p> : <SignIn />}

Em components cria o arquivo Profile.tsx
  import { User } from 'lucide-react'

  export function Profile() {
    return (
      <a
        href={`https://github.com/login/oauth/authorize?client_id=${process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID}`}
        className="flex items-center gap-3 text-left transition-colors hover:text-gray-50"
      >
        <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gray-400">
          <User className="h-5 w-5 text-gray-500" />
        </div>

        <p className="max-w-[140px] text-sm leading-snug">
          <span className="underline">Crie sua conta</span> e salve suas memórias!
        </p>
      </a>
    )
  }

Em page.tsx
  import { cookies } from 'next/headers'
  const isAuthenticated = cookies().has('token')
        {isAuthenticated ? <Profile /> : <SignIn />}

JWT-DECODE
Usado p extrair as informações de dentro do Payload (do token recebido do Github)
> npm i jwt-decode

Dentro de lib cria auth.ts
  import { cookies } from 'next/headers'
  import decode from 'jwt-decode'

  interface User {
    sub: string
    name: string
    avatarUrl: string
  }

  export function getUser(): User {
    const token = cookies().get('token')?.value

    if (!token) {
      throw new Error('Unauthenticated.')
    }

    const user: User = decode(token)

    return user
  }

IMAGEM
P carregar imagem externa no Next é preciso configurar no next.config.js
  const nextConfig = {
    images: {
      domains: ['avatars.githubusercontent.com'],
  },
}






