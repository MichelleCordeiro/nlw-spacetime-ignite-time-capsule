> npm i -y

> npm i typescript -D

> npx tsc --init

> npm i tsx -D

package.json
  "scripts": {
    "dev": "tsx watch src/server.ts"
  },

> npm i fastify

> npm install eslint -D
> npm i @rocketseat/eslint-config -D

NÃO EXECUTAR npx eslint --init
ele fará muitas perguntas p configurar seu jeito de programar (uso de vírgula ou não, aspas simples ou dupla ...)
O comando npm i @rocketseat... é a configuração q Diego criou

Cria o .eslintrc.json c o seguinte conteúdo
{
  "extends": [
    "@rocketseat/eslint-config/node"
  ]
}

Add no settings.json p corrigir automaticamente
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.addMissingImports": true
  },

No script do package.json add o código abaixo p corrigir automaticamente todos os arquivos .ts do projeto ao executar o comando de correção
  "scripts": {
    ...
    "lint": "eslint src --ext .ts --fix"
  },

Comando p corrigir todos os arquivos .ts
> npm run lint

Prisma: ferramenta p trabalhar c banco de dados
> npm i prisma -D

Help do prisma
> npx prisma -h

Informa ao prisma q iremos trabalhar c o banco SQLite e não c o banco padrão dele, o postegress
Ter a extensão do prisma no VS Code instalada
> npx prisma init --datasource-provider SQLite

Add no settings.json p alinhar itens automaticamente ao salvar
  "[prisma]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "Prisma.prisma"
  },

Após cria a tabela/model no schema.prisma
> npx prisma migrate dev

> npx prisma studio

> npm i @prisma/client

https://nextjs.org/     > Learn Next.js  > CREATE YOUR FIRST APP  >   Setup
https://nextjs.org/learn/basics/create-nextjs-app/setup
SAÍ DA PASTA SERVER
> npx create-next-app@latest web --use-npm

yes p todas as perguntas

na pasta web   > npm run dev

AULA 02 **********************
  schema.prisma
    model User {
    id        String @id @default(uuid())
    githubId  Int    @unique
    name      String
    login     String
    avatarUrl String

    memories Memory[]
  }

  model Memory {
    id     String @id @default(uuid())
    userId String

    coverUrl  String
    content   String
    isPublic  Boolean  @default(false)
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
  }

  > npx prisma migrate dev

  Dá erro p o banco já tem dados
  > npx prisma studio     (ao abrir a tabela User dá erro tbm)

  > npx prisma migrate reset
   > npx prisma migrate dev
    y create memories table


Em src > routes > memories.ts

SEPARANDO AS ROTAS
Cria em scr pasta e arquivo ts: uscr > lib > prisma.ts

BIBLIOTECA ZOD - p validar requisição
Por exemplo, o prisma não válida se na requisição consta o id
> npm i zod

Após o CRUP está pronto, instala o CORS
CORS é uma técnica de segurança do backend p determinar quais urls vão poder acessar a nossa API
> npm i @fastify/cors

No server.ts
  import cors from '@fastify/cors'

  app.register(cors, {
    origin: true, // todas as urls de frontend poderam acessar no backend
    // origin: ['http://localhost:3000', 'http://rocketseat.com.br/'],
  })

HTTPie
Aplicação q permite passar a rota no terminal

Instalei pelo chocolatey e pelo windows, e dava erro ao executar
  Meu python já estava atualizado 3.11.3
  Atualizei o pip 22.3.1 -> 23.1.2

  How to install HTTPie on windows?
  https://www.logicbig.com/how-to/tools/install-httpie.html

  Revisei as configurações no Windows:
    Botão direito no Meu Computador > Propriedades > Conf. avançadas do sistema > 
    > Variáveis de Ambiente > path (editar) > C:\Python311\Scripts
          > Michelle > path (editar)  > C:\Python311\Scripts

  Instalei o HTTPie pelo pip
  > pip install -U httpie

  Continuava dando erro
  > http GET http://www.example.com

Desinstalei o HTTPie, tanto a versão windows(pelo painel de controle) qto pelo pip
> pip uninstall httpie

Executei
> pip install awscli --force-reinstall --upgrade"

Re-instlaei o HTTPie
> pip install -U httpie

Deu certo
> http GET http://www.example.com


AULA 03

Ver anotações da aula 03 no web
Após registrar nova aplicação no GITHUB e gerar a chave secreta do Client, salva ela e o Client ID no arquivo .env
  # Github
  GITHUB_CLIENT_ID=5d9b9843964b7a74ffa8
  GITHUB_CLIENT_SECRET=ea4bcc96893ae322b767dc2d61bc0906668eab4d

DOTENV
Instala ele p o backend não converte automaticamente as variáveis de ambiente. O prisma sim, mas o back não
> npm i dotenv -D

No server.ts
  import 'dotenv/config'
  app.register(authRoutes)

Cria a rota routes  >  auth.ts

AXIOS
> npm i axios

Erro ESLint camel case
No .eslintrc.json
  "rules": {
    "camelcase": "off"
  }

AUTH.ts - Erro no 'process' - cannot find name 'process'. do you need to install type definitions...
  client_id: process.env.GITHUB_CLIENT_ID,
  client_secret: process.env.GITHUB_CLIENT_SECRET,

  Resolvi >  npm i --save-dev @types/node

JWT - JSON Web Token
Como o token expira rápido nosso backend cria outro p trabalhar c ele por qto tempo a gente definir q o usuário ficará logado
> npm i @fastify/jwt

https://jwt.io/
Pega o token mostrado no terminal após
> http POST localhost:3333/register code=codigoDaUrlAposClicarEmCrieSuaConta --json

Cola no Encoded do site e em Payload ver as infos

Esse token será enviado pro frontend, o frontend vai salvar esse token e vai utilizar p fazer as requisições futuras no meu backend. C esse token o backend vai poder saber exatamente qual q é o usuário q tá fazendo essas requisições

Cria arquivo auth.d.ts
Pega na documentação do fastify jwd (https://github.com/fastify/fastify-jwt)
  import '@fastify/jwt'

  declare module '@fastify/jwt' {
    export interface FastifyJWT {
      user: {
        sub: string
        name: string
        avatarUrl: string
      }
    }
  }

VER ANOTAÇÕES DO MOBILE DAS LINHAS 194-210


AULA 04
Nesse projeto tudo é json, qdo se cria uma memória no frontend e se envia p o backend é por meio de json (os dados, a url da capa, a rota, se é público ou não, etc).
Só q json tem uma limitação, não se consegue enviar arquivo por json, nel é tudo texto.
Até seria possível se convertesse o arquivo em base64, mas isso o tornaria mais pesado uns 30%.
E fazendo isso impediria de trablhar c uma importante feature do Node, a feature de stream. Q é basicamente conseguir enviar um arquivo do frontend p o backend aos poucos e aos poucos o backend já ir fazendo a tratativa de partes desse arquivos
P se trabalhar c arquivos no Node pode usar o plugin Fastify Multipart
Qdo se faz o submit em um formulário (<form action="/upload">) ele é feito através do Fastify Multipart

FASTIFY MULTIPART - https://github.com/fastify/fastify-multipart
  > npm i @fastify/multipart

No src  >   server.ts
  import multipart from '@fastify/multipart'
  app.register(multipart)

Em src  >  routes  >  upload.ts

Checar o envio de uma imagem 'console.log(upload.filename)' salva em C:\\Users\\Michelle/Documents/nlw.png
$ http POST localhost:3333/upload file@~/Documents/nlw.png -f
      HTTP/1.1 200 OK
      Connection: keep-alive
      Date: Sat, 20 May 2023 23:56:51 GMT
      Keep-Alive: timeout=72
      content-length: 0
      vary: Origin



Salvando arquivos no disco da aplicação apenas a título de estudos, em produção usaria serviços como Amazon S3, Google GCS, Cloudflare R2 ...
O '__dirname' resolve problemas c a barra normal e invertida (é diferente dependendo do SO)

    const writeStream = createWriteStream(
      resolve(__dirname, '../../uploads/', fileName),
    )

    await pump(upload.file, writeStream)

    const fullUrl = request.protocol.concat('://').concat(request.hostname)
    const fileUrl = new URL(`/uploads/${fileName}`, fullUrl).toString()

FASTIFY STATIC
Faz c q uma pasta do backend fique pública
> npm i @fastify/static


